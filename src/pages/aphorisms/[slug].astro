---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { marked } from 'marked';

export async function getStaticPaths() {
    const aphorisms = await getCollection('aphorisms');
    const sortedAphorisms = aphorisms.sort((a, b) => a.data.order - b.data.order);
    
    // Generate URL slug from order and title
    function generateSlug(order: number, title: string): string {
        const paddedOrder = order.toString().padStart(2, '0');
        const titleSlug = title
            .toLowerCase()
            .replace(/[^a-z0-9\s-]/g, '') // Remove special characters except spaces and hyphens
            .replace(/\s+/g, '-')         // Replace spaces with hyphens
            .replace(/-+/g, '-')          // Replace multiple hyphens with single hyphen
            .replace(/^-|-$/g, '');       // Remove leading/trailing hyphens
        
        return `${paddedOrder}-${titleSlug}`;
    }
    
    return sortedAphorisms.map((aphorism, index) => {
        const slug = generateSlug(aphorism.data.order, aphorism.data.title);
        return {
            params: { slug },
            props: { 
                aphorism, 
                index,
                slug,
                allAphorisms: sortedAphorisms.map((a, i) => ({
                    ...a,
                    slug: generateSlug(a.data.order, a.data.title),
                    index: i
                }))
            }
        };
    });
}

const { aphorism, index, slug, allAphorisms } = Astro.props;
---

<Layout title={`${aphorism.data.title} - Aphorisms - Aaron Zollman`} description={aphorism.data.description}>
    <!-- Full viewport container that breaks out of the main layout constraints -->
    <div id="viewport-container" class="fixed inset-0 bg-base-100 flex items-center justify-center p-4 z-10">
        <div id="content-wrapper" class="w-full max-w-md relative">
            <!-- Header positioned above the centered card -->
            <div id="header-section" class="absolute -top-20 left-0 right-0 text-center">
                <h1 class="text-3xl font-bold text-base-content mb-2">Tools for context</h1>
                <p class="text-base-content/70">Navigating product, organizations and motivation</p>
            </div>
            
            <!-- This container is now the centered element -->
            <div id="aphorism-container" class="relative">
                {allAphorisms.map((currentAphorism, currentIndex) => (
                    <div 
                        class={`aphorism-card absolute w-full transition-all duration-300 ${currentIndex === index ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-full'}`}
                        data-index={currentIndex}
                    >
                        <div class="card bg-base-200 shadow-xl border border-base-300 min-h-[500px] flex flex-col">
                            <div class="card-body p-8 flex-1 flex flex-col justify-between">
                                <div class="flex-1 flex flex-col justify-center items-center text-center space-y-6">
                                    <div class="text-6xl mb-4">
                                        {currentAphorism.data.icon || 'ðŸ’¡'}
                                    </div>
                                    <h2 class="text-xl font-bold text-base-content leading-tight">
                                        {currentAphorism.data.title}
                                    </h2>
                                    <div class="text-base-content/80 text-sm leading-relaxed prose prose-sm max-w-none prose-a:text-primary prose-a:no-underline hover:prose-a:underline">
                                        <Fragment set:html={marked.parse(currentAphorism.data.description)} />
                                    </div>
                                </div>
                                <div class="flex justify-between items-center mt-6">
                                    <div class="text-xs text-base-content/50">
                                        {currentIndex + 1}/{allAphorisms.length}
                                    </div>
                                    {/* Show references button only if references exist */}
                                    {currentAphorism.data.references && currentAphorism.data.references.length > 0 && (
                                        <button 
                                            class="btn btn-ghost btn-xs p-1 hover:bg-base-300 references-btn"
                                            data-card-index={currentIndex}
                                            title="View references"
                                        >
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                            </svg>
                                        </button>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
            
            <!-- Navigation positioned below the centered card -->
            <div id="navigation-section" class="absolute -bottom-20 left-0 right-0">
                <div id="button-controls" class="flex justify-center space-x-4 mb-4">
                    <button id="prev-btn" class="btn btn-circle btn-outline btn-sm" disabled={index === 0}>
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                    </button>
                    <button id="next-btn" class="btn btn-circle btn-outline btn-sm" disabled={index === allAphorisms.length - 1}>
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                </div>
                
                <div id="dot-indicators" class="flex justify-center space-x-2">
                    {allAphorisms.map((_, dotIndex) => (
                        <button 
                            class={`w-2 h-2 rounded-full transition-all ${dotIndex === index ? 'bg-primary' : 'bg-base-content/20'}`}
                            data-dot={dotIndex}
                        ></button>
                    ))}
                </div>
            </div>
        </div>
    </div>
    
    <!-- References Modal Overlay -->
    <div id="references-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-base-200 rounded-lg shadow-xl max-w-md w-full max-h-80 overflow-y-auto">
            <div class="p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-bold text-base-content">References</h3>
                    <button id="close-references" class="btn btn-ghost btn-sm btn-circle">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <div id="references-content" class="space-y-3">
                    <!-- References will be populated here -->
                </div>
            </div>
        </div>
    </div>
</Layout>

<script define:vars={{ 
    aphorismsReferences: allAphorisms.map((aphorism, index) => ({
        index, 
        references: aphorism.data.references || null
    })),
    allAphorismsSlugs: allAphorisms.map(a => ({ index: a.index, slug: a.slug })),
    currentAphorismIndex: index
}}>
    // Store references data globally for client-side access
    window.aphorismsReferences = aphorismsReferences;
    // Store slug data globally for URL routing
    window.aphorismsSlugs = allAphorismsSlugs;
    // Store current index
    window.currentAphorismIndex = currentAphorismIndex;
</script>

<script is:inline>
    // Global state for card navigation and UI elements
    let currentIndex = 0;
    let cards = [];
    let totalCards = 0;
    let prevBtn = null;
    let nextBtn = null;
    let dots = [];
    let container = null;
    let referencesOverlay = null;
    let referencesContent = null;
    let closeReferencesBtn = null;
    let isInitialized = false;
    
    // Initialize the aphorisms interface
    function init() {
        // Prevent multiple initializations
        if (isInitialized) {
            return;
        }
        
        // Get DOM elements
        cards = Array.from(document.querySelectorAll('.aphorism-card'));
        totalCards = cards.length;
        prevBtn = document.getElementById('prev-btn');
        nextBtn = document.getElementById('next-btn');
        dots = Array.from(document.querySelectorAll('[data-dot]'));
        container = document.getElementById('aphorism-container');
        referencesOverlay = document.getElementById('references-overlay');
        referencesContent = document.getElementById('references-content');
        closeReferencesBtn = document.getElementById('close-references');
        
        // Ensure we have the necessary elements
        if (!container || cards.length === 0) {
            console.warn('Aphorisms: Required elements not found, skipping initialization');
            return;
        }
        
        // Set current index from page data
        currentIndex = window.currentAphorismIndex || 0;
        
        // Navigation event listeners
        if (prevBtn) {
            prevBtn.addEventListener('click', () => previousCard());
        }
        if (nextBtn) {
            nextBtn.addEventListener('click', () => nextCard());
        }
        
        dots.forEach((dot, index) => {
            dot.addEventListener('click', () => goToCard(index));
        });
        
        // References functionality
        const referenceBtns = document.querySelectorAll('.references-btn');
        referenceBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const cardIndex = parseInt(btn.getAttribute('data-card-index'));
                const referencesData = window.aphorismsReferences.find(item => item.index === cardIndex);
                if (referencesData && referencesData.references) {
                    showReferences(referencesData.references);
                }
            });
        });
        
        // Modal event listeners
        if (closeReferencesBtn) {
            closeReferencesBtn.addEventListener('click', hideReferences);
        }
        
        if (referencesOverlay) {
            referencesOverlay.addEventListener('click', (e) => {
                if (e.target === referencesOverlay) {
                    hideReferences();
                }
            });
        }
        
        // Touch/swipe support
        let startX = 0;
        let startY = 0;
        let endX = 0;
        let endY = 0;
        
        if (container) {
            container.addEventListener('touchstart', (e) => {
                startX = e.touches[0].clientX;
                startY = e.touches[0].clientY;
            });
            
            container.addEventListener('touchmove', (e) => {
                e.preventDefault();
            });
            
            container.addEventListener('touchend', (e) => {
                endX = e.changedTouches[0].clientX;
                endY = e.changedTouches[0].clientY;
                
                const deltaX = endX - startX;
                const deltaY = endY - startY;
                
                // Only trigger swipe if horizontal movement is greater than vertical
                if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
                    if (deltaX > 0) {
                        previousCard();
                    } else {
                        nextCard();
                    }
                }
            });
        }
        
        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                previousCard();
            } else if (e.key === 'ArrowRight') {
                nextCard();
            }
        });
        
        // Initialize UI with current index
        updateUI();
        
        // Mark as initialized
        isInitialized = true;
    }
    
    // Reset initialization state when page unloads
    function cleanup() {
        isInitialized = false;
    }
    
    function showReferences(references) {
        if (!referencesContent || !referencesOverlay) return;
        
        referencesContent.innerHTML = '';
        references.forEach(ref => {
            const refDiv = document.createElement('div');
            refDiv.className = 'p-3 bg-base-100 rounded border border-base-300';
            
            const title = document.createElement('h4');
            title.className = 'font-semibold text-base-content mb-1';
            title.textContent = ref.title;
            
            const author = document.createElement('p');
            author.className = 'text-sm text-base-content/70 mb-2';
            author.textContent = ref.author || 'Unknown Author';
            
            const link = document.createElement('a');
            link.href = ref.url;
            link.target = '_blank';
            link.rel = 'noopener noreferrer';
            link.className = 'text-sm text-primary hover:text-primary-focus underline';
            link.textContent = 'View Reference â†’';
            
            refDiv.appendChild(title);
            refDiv.appendChild(author);
            refDiv.appendChild(link);
            referencesContent.appendChild(refDiv);
        });
        
        referencesOverlay.classList.remove('hidden');
    }
    
    function hideReferences() {
        if (referencesOverlay) {
            referencesOverlay.classList.add('hidden');
        }
    }
    
    function goToCard(index) {
        if (index >= 0 && index < totalCards) {
            // Navigate to the specific aphorism URL
            const slugData = window.aphorismsSlugs.find(s => s.index === index);
            if (slugData) {
                window.location.href = `/aphorisms/${slugData.slug}`;
            }
        }
    }
    
    function nextCard() {
        if (currentIndex < totalCards - 1) {
            goToCard(currentIndex + 1);
        }
    }
    
    function previousCard() {
        if (currentIndex > 0) {
            goToCard(currentIndex - 1);
        }
    }
    
    function updateUI() {
        // Update cards (only the current one should be visible)
        cards.forEach((card, index) => {
            if (index === currentIndex) {
                card.classList.remove('opacity-0', 'translate-x-full', '-translate-x-full');
                card.classList.add('opacity-100', 'translate-x-0');
            } else {
                card.classList.remove('opacity-100', 'translate-x-0');
                card.classList.add('opacity-0', 'translate-x-full');
            }
        });
        
        // Update buttons
        if (prevBtn) {
            prevBtn.disabled = currentIndex === 0;
        }
        if (nextBtn) {
            nextBtn.disabled = currentIndex === totalCards - 1;
        }
        
        // Update dots
        dots.forEach((dot, index) => {
            if (index === currentIndex) {
                dot.classList.remove('bg-base-content/20');
                dot.classList.add('bg-primary');
            } else {
                dot.classList.remove('bg-primary');
                dot.classList.add('bg-base-content/20');
            }
        });
    }
    
    // Initialize when DOM is loaded OR when Astro transitions complete
    document.addEventListener('DOMContentLoaded', () => {
        init();
    });
    
    // Handle Astro view transitions
    document.addEventListener('astro:page-load', () => {
        init();
    });
    
    // Handle Astro view transitions start (cleanup)
    document.addEventListener('astro:before-preparation', () => {
        cleanup();
    });
    
    // Also initialize immediately in case the page is already loaded
    if (document.readyState === 'loading') {
        // Document is still loading, wait for DOMContentLoaded
        document.addEventListener('DOMContentLoaded', init);
    } else {
        // Document is already loaded, initialize immediately
        init();
    }
</script>

<style>
    .aphorism-card {
        height: 500px;
    }
    
    /* Responsive card heights */
    @media (max-width: 640px) {
        .aphorism-card {
            height: 450px;
        }
    }
    
    @media (max-height: 600px) {
        .aphorism-card {
            height: 350px;
        }
    }
    
    /* Ensure container matches card height */
    #aphorism-container {
        height: 500px;
    }
    
    @media (max-width: 640px) {
        #aphorism-container {
            height: 450px;
        }
    }
    
    @media (max-height: 600px) {
        #aphorism-container {
            height: 350px;
        }
    }
</style>
